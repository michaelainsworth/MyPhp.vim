###############################################################################
# Basic constructs
###############################################################################

snippet o "<?php" w
<?php $0
endsnippet

snippet l "?>" w
?>$0
endsnippet

snippet tod "todo"
/// @todo ${1:Brief description}
endsnippet

snippet v "$a = $b"
${1:$a} = ${2:$b};
endsnippet

snippet r "return value;"
return ${1:value};
endsnippet

snippet d "var_dump(value);"
var_dump(${1:$value});
endsnippet

snippet i "if (test)"
if (${1:true}) {
	$0
}
endsnippet

snippet e "else"
else {
	$0
}
endsnippet

snippet ei "else if (test)"
else if (${1:true}) {
	$0
}
endsnippet

snippet w "while (test)"
while (${1:true}) {
	$0
}
endsnippet

snippet f "for (...)"
for (${1:$i = 0}; ${2:$i < $size}; ${3:++$i}) {
	$0
}
endsnippet

snippet fe "foreach (...)"
foreach (${1:$array} as ${2:$key} => ${3:$value}) {
	$0
}
endsnippet

snippet h "echo $value;"
echo ${1:$value}; 
endsnippet

###############################################################################
# Embedded constructs
###############################################################################

snippet tod: "<?php /* todo */ ?>" w
<?php /* todo: ${1:description} */ ?>
endsnippet

snippet v: "<?php $a = $b; ?>" w
<?php ${1:$a} = ${2:$b}; ?>
endsnippet

snippet r: "<?php return value; ?>" w
<?php return${1: $value}; ?>
endsnippet

snippet d: "<?php var_dump(value); ?>" w
<?php var_dump(${1:$value}); ?>
endsnippet

snippet i: "<?php if (test) : ?>" w
<?php if (${1:test}) : ?>
	${0}
<?php endif; ?>
endsnippet

snippet e: "<?php else : ?>" w
<?php else : ?>
endsnippet

snippet ei: "<?php else if (test): ?>" w
<?php else if (${1:test}) : ?>
endsnippet

snippet eni: "<?php endif; ?>" w
<?php endif; ?>
endsnippet

snippet w: "<?php while (test) : ?>" w
<?php while (${1:test}) : ?>
endsnippet

snippet enw: "<?php endwhile; ?>" w
<?php endwhile; ?>
endsnippet

snippet f: "<?php for (...) : ?>" w
<?php for (${1:$i = 0}; ${2:$i < $size}; ${3:++$i}) : ?>
endsnippet

snippet enf: "<?php endfor; ?>" w
<?php endfor; ?>
endsnippet

snippet fe: "<?php foreach (...) : ?>" w
<?php foreach (${1:$array} as ${2:$key} => ${3:$value}) : ?>
endsnippet

snippet enfe: "<?php endforeach; ?>" w
<?php endforeach; ?>
endsnippet

snippet hz: "<?php echo $this->escapeHtml() ?>" w
<?php echo $this->escapeHtml(${1:$value}); ?>
endsnippet

snippet h: "<?php echo $value ?>" w
<?php echo ${1:$value}; ?>
endsnippet


###############################################################################
# Uncategorised
###############################################################################

snippet fn "Function"
/**
 * ${3:Brief description}
 * 
 * ${4:Detailed description}
 */
function ${1:foo}(${2:$bar}) {
	$0
}
endsnippet

snippet yfn "Anonymous Function Definition"
function(${1:$arguments}) use(${2:$references}) {
	$0
}
endsnippet
 
snippet ns "Namespace"
namespace ${1:`!v expand('%:p:h')`};
endsnippet

snippet u "Use"
use ${2:`!v substitute(expand('%:p:h'), '/', '\\', 'g')`}\\${1};
endsnippet
 
snippet in "Interface"
/**
 * ${2:Brief description}
 * 
 * ${3:Detailed description}
 */
interface ${1:`!v substitute(expand('%:p:t'), '.php', '', 'g')`} {
	$0
}
endsnippet

snippet c "Class"
/**
 * ${2:Brief description}
 * 
 * ${3:Detailed description}
 */
class ${1:`!v substitute(expand('%:p:t'), '.php', '', 'g')`} {
	$0
}
endsnippet

snippet cn "Constructor"
/**
 * ${3:Brief description}
 * 
 * ${4:Detailed description}
 */
${2:public} function __construct(${1}) {
	$0
}
endsnippet

snippet mvs "Member Variable Setter"
$this->${1:property} = $${2:$1};
endsnippet

snippet ds "Destructor"
/**
 * ${1:Brief description}
 * 
 * ${2:Detailed description}
 */
public function __destruct() {
	$0
}
endsnippet

snippet mfn "Member Function"
/**
 * ${4:Brief description}
 *
 * ${5:Detailed description}
 */
${3:public} function ${1:foo}(${2:$bar}) {
	$0
}
endsnippet

snippet afn "Accessor Function"
/**
 * Accessor function for $this->${1}.
 */
public function ${1}() {
	return $this->${1};
}
endsnippet

snippet sfn "Static Function"
/**
 * ${4:Brief description}
 *
 * ${5:Detailed description}
 */
static ${3:public} function ${1:foo}(${2:$bar}) {
	$0
}
endsnippet

snippet mv "Member Variable"
/**
 * ${2:Brief description}
 *
 * ${3:Detailed description}
 *
 * @var ${4:type}
 */
private $${1};
endsnippet

snippet cs "Comment Section"
// ========================================================================
// ${1:Section description}
// ========================================================================
endsnippet

snippet css "Comment Subsection"
// ------------------------------------------------------------------------
// ${1:Subsection description}
// ------------------------------------------------------------------------
endsnippet

snippet mstr "Magic Method __toString()"
/**
 * ${1:Brief description}
 *
 * ${2:Detailed description}
 */
public function __toString() {
	$0
}
endsnippet

snippet mg "Magic Method __get()"
/**
 * ${1:Brief description}
 *
 * ${2:Detailed description}
 */
public function __get($name) {
	$0
}
endsnippet

snippet ms "Magic Method __set()"
/**
 * ${1:Brief description}
 *
 * ${2:Detailed description}
 */
public function __set($name, $value) {
	$0
}
endsnippet

snippet dox "Documentation"
/**
 * ${1:Brief description}
 *
 * ${2:Detailed description}
 */
endsnippet

snippet tr "Try/Catch"
try {
	$0
} catch (${1:\Exception $exception}) {
	${2:echo $exception->getMessage();}
}
endsnippet

